Input Structure - SDF File
*********************************************
After the bond block, you can specify formal charge. Just put the total charge on one atom.

The following example means there is 1 atom with a formal charge: atom 2 has a +1 charge

M  CHG  1   2   1


**All input arguments are specified in poltype.ini file**

Most Common Inputs
********************************************* 
structure         specifies input structure for poltype, must include total charge information. 
                  Default=None.
numproc           specifies number of processors used for running quantum jobs. 
                  Default=1.
maxmem            specifies max RAM used for running quantum jobs. 
                  Default=700MB 
maxdisk           specifies max scratch space used for running quantum jobs. 
                  Default=100GB

Submitting Quantum Jobs Externally
********************************************* 
bashrcpath        specifies path for bashrc to source for running quantum jobs, used when calling external API 
                  for submitting quantum jobs. 
                  Default None.
externalapi       specifies path to external API used for submitting quantum jobs on a cluster. 
                  Default=None.

Geometry Optimization
********************************************* 
optbasisset       specifies basis set for geometry optimization. 
                  Default=6-31G*
gausoptcoords     specifies coordinate system used for gaussian geometry optimization. 
                  Default='' 
                  (will default to modified redundant internal coordinates).
freq              specifies to do a frequency calculation during geometry optimization. Computes true Hessian 
                  and determines if structure is minimum rather than saddle point, but very expensive. 
                  Default=False
optpcm            specifies to use PCM for geometry optimization. 
                  Default=True if there is a net charge.
optmaxcycle       specifies the number of max cycles or iterations allowed during optimization.
                  Default=400
optmethod         specifies quantum method for geometry optimziation. 
                  Default=MP2

Distributed Multipole Analysis (DMA) and Electrostatic Single Point (ESP) Inputs
********************************************* 
use_psi4          specifies to use PSI4 for quantum geometry optimzation and SP calculations. 
                  Default=False
use_psi4SPonly    specifies to use PSI4 only for SP calculations. 
                  Default=False
qmonly            specifies to run quantum for geometry optimization, DMA SP and ESP SP then quit. 
                  Default=False.
omit-espfit       specifies to not do esp fitting. 
                  Default=False
dmamethod         specifies which quantum method to use for distributed multipole analysis (DMA). 
                  Default=MP2
espmethod         specifies which quantum method to use for refined multipoles. 
                  Default=MP2
dmabasisset       specifies basis set to use for quantum that generates initial multipoles. 
                  Default=6-311G**
espbasisset       specifies basis set to use for quantum intended for refined multipoles. 
                  Default=6-311++G(2d,2p)

Torsion Parameterization
*********************************************       
rotalltors        specifies poltype to spin all rotatable bonds instead of transferring torsion parameters if 
                  found in database. 
                  Default=False
torsppcm          specifies poltype to use PCM for torsion SP. 
                  Default=True if there is net charge
toroptpcm         specifies poltype to use PCM for torsion optimization. 
                  Default=True if there is net charge.
dontdotor         specifies poltype to skip torsion spinning. 
                  Default=False
dontdotorfit      specifies poltype to skip torsion fitting. 
                  Default=False
torsionrestraint  specifies how many kcals/mol to restrain other torsions around rotatable bond to be at 
                  current dihedral angle. 
                  Default=.1
foldnum           specifies the number of fourier terms used in torsion fitting.
                  Default=3
tordatapointsnum  specifies the number of quantum jobs to sample along the dihedral angle for all torsions.
                  Default=12 if number of torsion parameters to fit is less than 12, else automatically adds more points
fitrotbndslist    specifies poltype to derive torsion parameters for all bonds
                  specified as fitrotbndslist=1 2, 3 4, 5 6
                  Default=[] (empty)
torspmethod       specifies the SP method used for getting refined multipoles via fitting to quantum potential. 
                  Default=MP2
toroptmethod      specifies the opt method used for optimizing the geometry prior to deriving parameters. 
                  Default=HF
toroptbasisset    specifies which basis set to use for geometry optimization during torsion parameterization. 
                  Default=6-31G*
torspbasisset     specifies which basis set to use for SP during torsion parameterization. 
                  Default=6-311++G**
dont-tor-qm-opt   specifies to not use quantum during torsion parameterization and only use tinker 
                  minimization. 
                  Default=False
onlyrotbnd        specifies to only rotate single bond, onlyrotbnd=1,2 . 
                  Default=[] (empty)

Modified Amino Acids
*********************************************
modifiedresiduepdbcode    specifies three letter modified amino acid PDB code. 
                          No default.
mutatedsidechain          specifies modified amino acid structure (*.sdf) to replace with existing side chain. 
                          Structure most include immediate backbone for protein alignment. 
                          No default.
mutatedresiduenumber      specifies which amino acid residue will be replaced with mutated side chain. 
                          No default.
unmodifiedproteinpdbname  specifies the PDB (with protonation states already assigned), with un-modified 
                          amino acids. 
                          No default.
modifiedproteinpdbname    specifies the PDB with modified amino acids, if not replacing existing side chain, or 
                          this was already done. 
                          No default.
amoebabioprmpath          speicfies the path to amoebabio18.prm file for stitching parameters from existing 
                          protein/NA parameters to mutated parameters. 
                          No default.


Filenames
********************************************* 
optlog   specifies name for geometry  optimization log file. 
         Default=structure-opt.log
dmalog   specifies name for DMA SP log file. 
         Default=structure-dma.log
esplog   specifies name for ESP log file. 
         Default=structure-esp.log.
dmafck   specifies name for dma fchk file. 
         Default=structure-dma.fchk
espfck   specifies name for esp fchk file. 
         Default=structure-esp.fchk
dmachk   specifies name for dma chk file. 
         Default=structure-dma.chk
espchk   specifies name for esp chk file. 
         Default=structure-esp.chk
formchk  specifies name for formchk executable. 
         Default=formchk
gdmaout  specifies name for gdma output file. 
         Default=structure.gdmaout
gbindir  specifies path to binary for gaussian. 
         Default=g09

Atom Typing
********************************************* 
atmidx   specifies which number to start poltype type numbers from. 
         Default=401
uniqidx  specifies to use atom indexes as atom type numbers rather than averaging types
         Default=False


*********************************************
Check your results!
*********************************************
ttt.xyz and ttt.key are the resulting structure and parameter files you will need.

Check log file to make sure all calculations actually complete successfully!

If you have a charged molecule, make sure the correct charge is reflected in your input structure.

For molecules of high symmetry, please check frame definitions and alter them as needed using POLEDIT and POTENTIAL command in Tinker to change frames/combine multipoles and refit to ESP.

The molecular dipole moments should match between QM and MM.

The ESP fitting RMSE should be small.

Check the torsion plots in qm-torsion folder.

If you are concerned with vdw parameters, you may check again QM dimer (your_molecule-water) structure and energy.



POLTYPE Files
*********************************************
*.sdf           Input structure file.
*-opt.com       Gaussian input file for geometry optimization.
*-opt.log       Gaussian output file for geometry optimization.
*-opt.chk       Unreadable electron density from geometry optimization.
*-opt.fchk      Human readable electron density from geometry optimization.
*-dma.com       Gaussian input file for QM SP calculation to obtain density for running distributed multipole analysis.
*-dma.log       Gaussian output file for QM SP calculation to obtain density for running distributed multipole analysis.
*-dma.chk       Unreadable density for running distributed multipole analysis.
*-dma.fchk      Human readable density for running distributed multipole analysis.
*-esp.com       Gaussian input file for QM SP calculation to obtain density for running electrostatic potential fitting.
*-esp.log       Gaussian output file for QM SP calculation to obtain density for running electrostatic potetnial fitting.
*-esp.chk       Unreadable density for running electrostatic potential fitting.
*-esp.fchk      Human readable density for running electrostatic potential fitting.
*.gdmain        Input for GDMA.
dma.punch       Intermediate file produced from GDMA.
*.gdmaout       Output from GDMA.
*.key           First keyfile containing atom indexes, multipoles from GDMA output and polarize terms.
*.grid          Textfile specifying coordinates of where electrostatic potential will be evaluated.
*.cube          Potential from QM SP density at specified grid coordinates, in format not recognized by Tinker.
*.pot           Potential from cube file at specified grid coordinates in Tinker readable format.
*-peditin.txt   Input for poledit to change frames as specified by POLTYPE.
RMSPD.txt       Textfile computing the root mean square potential difference between potential from QM and from MM.
*-groups.txt    Input for amvmpoles.pl to reduce atom typing.
*.xyz_2         Structure using symmetry types rather than atom index types.
*.key_2         Second keyfile using same parameters as *.key but with symmetry type numbers rather than atom index types.
*.key_3         Third keyfile containing multipole parameters from electrostatic potential fitting.
*.key_4         Fourth key file using same parameters as *.key_3 but also includes valence parameters from database.
qm-torsion      Folder containing QM,MM optimized structures and SP computations to evaluate energy along dihedral angle.
*.key_5         Fifth key file using same parameters as *.key_4 but with fitted torsion parameters.
ttt.xyz         Final QM optimized structure.
ttt.key         Final key file.
ttt.xyz_2       Final MM optimized structure from QM.
*-poltype.log   Poltype workflow, computations and external calls are shown in here.

qm-torsion
*********************************************
*-opt-a-b-c-d_angle_preQMOPTprefit.xyz           Tinker XYZ from previous Gaussian log file,before current QM optimzation                                                   and torsion fitting.

*-opt-a-b-c-d_angle_preQMOPTprefit_xyzformat.xyz Tinker XYZ from previous Gaussian log file,before current QM optimzation                                                   and torsion fitting.

*-opt-a-b-c-d_angle_preQMOPTprefit.key           Tinker key using .key_4 parameters but with additional torsion restraints                                                  to fix other torsions during minimization, before current QM optimzation                                                   and torsion fitting.

*-opt-a-b-c-d_angle_preQMOPTprefit.xyz_2         Minimized Tinker XYZ, before current QM optimzation and torsion fitting.

*-opt-a-b-c-d_angle_preQMOPTprefit.out           Output from Tinker minimization, before current QM optimzation and torsion                                                 fitting.

*-opt-a-b-c-d_angle.com                          Gaussian input for geometry optimization.
*-opt-a-b-c-d_angle.chk                          Unreadable density information from geometry optimization.
*-opt-a-b-c-d_angle.log                          Gaussian output from geometry optimization.

*-opt-a-b-c-d_angle_postQMOPTprefit.xyz          Tinker XYZ from previous Gaussian log file,after current QM optimzation                                                    and torsion fitting.

*-opt-a-b-c-d_angle_postQMOPTprefit.key          Tinker key using .key_4 parameters but with additional torsion restraints                                                  to fix other torsions during minimization, after QM optimzation and                                                        torsion fitting.

*-opt-a-b-c-d_angle_postQMOPTprefit.xyz_2        Minimized Tinker XYZ, after QM optimzation and torsion fitting.

*-opt-a-b-c-d_angle_postQMOPTprefit.out          Output from Tinker minimization, before QM optimzation and torsion                                                         fitting.

*-opt-a-b-c-d_angle_postQMOPTprefit.alz          Output from Tinker analyze, before QM optimzation and torsion fitting.

*-sp-a-b-c-d_angle.com                           Gaussian input for single point calculation.
*-sp-a-b-c-d_angle.chk                           Unreadable density information from single point calculation.
*-sp-a-b-c-d_angle.log                           Gaussian output from single point calculation.


*-opt-a-b-c-d_angle_postQMOPTpostfit.xyz         Tinker XYZ from previous Gaussian log file,after current QM optimzation                                                    and after torsion fitting.

*-opt-a-b-c-d_angle_postQMOPTpostfit.key         Tinker key using .key_4 parameters but with additional torsion restraints                                                  to fix other torsions during minimization, after QM optimzation and                                                        after torsion fitting.

*-opt-a-b-c-d_angle_postQMOPTpostfit.xyz_2       Minimized Tinker XYZ, after QM optimzation and after torsion fitting.

*-opt-a-b-c-d_angle_postQMOPTpostfit.out         Output from Tinker minimization, before QM optimzation and after torsion                                                   fitting.

*-opt-a-b-c-d_angle_postQMOPTpostfit.alz         Output from Tinker analyze, after QM optimzation and torsion fitting.

*-fit-b-c.png                                    Plot of QM-MM as a function of dihedral angle and the fourier fit.
*-energy-b-c.png                                 Plot of MM1 (prefit),MM2 (postfit),QM and MM1+Fit as a function of                                                         dihedral angle.

Poltype Modules
*********************************************
symmetry.py                Handles detecting symmetry in input molecule.
modifiedresidues.py        Handles parameterizing new amino acid side chains and stitching parameters from amoebabio18.prm for                        parts of molecule already parameterized.

multipole.py               Handles multipole frame definitions and GDMA.
valence.py                 Database for searching valence parameters via SMART string matching to input molecule.
apicall.py                 Handles external calls for QM job submission on clusters. THE FUNCTION CallExternalAPI IN THIS                             MODULE NEEDS TO BE MODIFIED FOR SPECIFIC CLUSTER SUBMISSION METHODS.
optimization.py            Handles Gaussian,Psi4 and Tinker minimization.
electrostaticpotential.py  Handles electrostatic potential fitting and Gaussian, Psi4 SP calculations.
torsionfit.py              Handles torsion fitting.
torsiongenerator.py        Handles torsion Gaussian,Psi4 and Tinker minimization, SP and analyze.
